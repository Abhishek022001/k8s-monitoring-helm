// Destination: otlpGateway (otlp)
otelcol.receiver.prometheus "otlpgateway" {
  output {
    metrics = [otelcol.processor.transform.otlpgateway.input]
  }
}
otelcol.receiver.loki "otlpgateway" {
  output {
    logs = [otelcol.processor.transform.otlpgateway.input]
  }
}
otelcol.auth.basic "otlpgateway" {
  username = nonsensitive(remote.kubernetes.secret.otlpgateway.data["username"])
  password = remote.kubernetes.secret.otlpgateway.data["password"]
}

otelcol.processor.transform "otlpgateway" {
  error_mode = "ignore"
  metric_statements {
    context = "resource"
    statements = ["set(attributes[\"k8s.cluster.name\"], \"all-features-cluster\") where attributes[\"k8s.cluster.name\"] == nil"]
  }
  log_statements {
    context = "resource"
    statements = ["set(attributes[\"k8s.cluster.name\"], \"all-features-cluster\") where attributes[\"k8s.cluster.name\"] == nil"]
  }
  trace_statements {
    context = "resource"
    statements = ["set(attributes[\"k8s.cluster.name\"], \"all-features-cluster\") where attributes[\"k8s.cluster.name\"] == nil"]
  }

  output {
    metrics = [otelcol.exporter.otlp.otlpgateway.input]
    logs = [otelcol.exporter.otlp.otlpgateway.input]
    traces = [otelcol.exporter.otlp.otlpgateway.input]
  }
}
otelcol.exporter.otlp "otlpgateway" {
  client {
    endpoint = "https://otlp.example.com:4317/v1/traces"
    headers = {
      "X-Scope-OrgID" = nonsensitive(remote.kubernetes.secret.otlpgateway.data["tenantId"]),
    }
    tls {
      insecure = false
      insecure_skip_verify = false
      ca_pem = nonsensitive(remote.kubernetes.secret.otlpgateway.data["ca"])
      cert_pem = nonsensitive(remote.kubernetes.secret.otlpgateway.data["cert"])
      key_pem = remote.kubernetes.secret.otlpgateway.data["key"]
    }
  }
}

remote.kubernetes.secret "otlpgateway" {
  name      = "otlpgateway-ko-k8s-monitoring"
  namespace = "default"
}

// Feature: Cluster Events
declare "cluster_events" {
  argument "logs_destinations" {
    comment = "Must be a list of log destinations where collected logs should be forwarded to"
  }

  loki.source.kubernetes_events "cluster_events" {
    job_name   = "integrations/kubernetes/eventhandler"
    log_format = "logfmt"
    forward_to = argument.logs_destinations.value
  }
}
cluster_events "feature" {
  logs_destinations = [
    otelcol.receiver.loki.otlpgateway.receiver,
  ]
}

// Self Reporting
prometheus.exporter.unix "kubernetes_monitoring_telemetry" {
  set_collectors = ["textfile"]
  textfile {
    directory = "/etc/alloy"
  }
}

discovery.relabel "kubernetes_monitoring_telemetry" {
  targets = prometheus.exporter.unix.kubernetes_monitoring_telemetry.targets
  rule {
    target_label = "instance"
    action = "replace"
    replacement = "ko"
  }
  rule {
    target_label = "job"
    action = "replace"
    replacement = "integrations/kubernetes/kubernetes_monitoring_telemetry"
  }
}

prometheus.scrape "kubernetes_monitoring_telemetry" {
  job_name   = "integrations/kubernetes/kubernetes_monitoring_telemetry"
  targets    = discovery.relabel.kubernetes_monitoring_telemetry.output
  scrape_interval = "1h"
  clustering {
    enabled = true
  }
  forward_to = [
    otelcol.receiver.prometheus.otlpgateway.receiver,
  ]
}
